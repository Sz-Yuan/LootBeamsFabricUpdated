package com.lootbeams.compat;

import com.lootbeams.LootBeams;
import me.shedaniel.clothconfig2.api.ConfigBuilder;
import me.shedaniel.clothconfig2.api.ConfigCategory;
import net.minecraft.client.gui.screen.Screen;
import net.minecraft.text.LiteralTextContent;
import net.minecraft.text.Text;

import java.util.ArrayList;

public class LootBeamsConfigScreen {
    public static Screen getConfigScreen(Screen parent){
        ConfigBuilder builder = ConfigBuilder.create();
        if (parent != null) builder.setParentScreen(parent);
        builder.setTitle(Text.of("Loot Beams"));
        var main = builder.getOrCreateCategory(Text.of("Main"));
        main.addEntry(builder.entryBuilder().startBooleanToggle(Text.of("Render Name Color"), LootBeams.config.renderNameColor)
                        .setDefaultValue(true)
                        .setSaveConsumer(flag -> LootBeams.config.renderNameColor = flag)
                        .setTooltip(Text.of("If beams should be colored the same as the Items name (excludes name colors from rarity). \nThis has priority over render_rarity_color."))
                .build())
                .addEntry(builder.entryBuilder().startBooleanToggle(Text.of("Render Rarity Color"), LootBeams.config.renderRarityColor)
                        .setDefaultValue(true)
                        .setSaveConsumer(flag -> LootBeams.config.renderRarityColor = flag)
                        .setTooltip(Text.of("If beams should be colored the same as the Items rarity."))
                        .build())
                .addEntry(builder.entryBuilder().startFloatField(Text.of("Beam Radius"), LootBeams.config.beamRadius)
                        .setDefaultValue(1)
                        .setMin(0)
                        .setMax(5)
                        .setSaveConsumer(value -> LootBeams.config.beamRadius = value)
                        .setTooltip(Text.of("The radius of the Loot Beam."))
                        .build())
                .addEntry(builder.entryBuilder().startFloatField(Text.of("Beam Height"), LootBeams.config.beamHeight)
                        .setDefaultValue(1)
                        .setMin(0)
                        .setMax(10)
                        .setSaveConsumer(value -> LootBeams.config.beamHeight = value)
                        .setTooltip(Text.of("The height of the Loot Beam."))
                        .build())
                .addEntry(builder.entryBuilder().startFloatField(Text.of("Beam Y Offset"), LootBeams.config.beamYOffset)
                        .setDefaultValue(0)
                        .setMin(-30)
                        .setMax(30)
                        .setSaveConsumer(value -> LootBeams.config.beamYOffset = value)
                        .setTooltip(Text.of("The Y-offset of the loot beam."))
                        .build())
                .addEntry(builder.entryBuilder().startFloatField(Text.of("Beam Alpha"), LootBeams.config.beamAlpha)
                        .setDefaultValue(0.85f)
                        .setMin(0)
                        .setMax(1)
                        .setSaveConsumer(value -> LootBeams.config.beamAlpha = value)
                        .setTooltip(Text.of("Transparency of the Loot Beam."))
                        .build())
                .addEntry(builder.entryBuilder().startFloatField(Text.of("Render Distance"), LootBeams.config.renderDistance)
                        .setDefaultValue(24)
                        .setMin(0)
                        .setMax(24)
                        .setSaveConsumer(value -> LootBeams.config.renderDistance = value)
                        .setTooltip(Text.of("How close the player has to be to see the beam.\n (note: ItemEntities stop rendering at 24 blocks, so that is the limit for beams)"))
                        .build())
                .addEntry(builder.entryBuilder().startStrList(Text.of("Color Overrides"), LootBeams.config.colorOverrides)
                        .setDefaultValue(new ArrayList<>())
                        .setSaveConsumer(value -> LootBeams.config.colorOverrides = value)
                        .setTooltip(Text.of("Overrides an item's beam color with hex color.\n Must follow the specific format: (registryname=hexcolor) Or (#tagname=hexcolor).\n Example: \"minecraft:stone=0xFFFFFF\". This also accepts modids."))
                        .build());
        var items = builder.getOrCreateCategory(Text.of("Items"));
        items.addEntry(builder.entryBuilder().startBooleanToggle(Text.of("All Items"), LootBeams.config.allItems)
                        .setDefaultValue(true)
                        .setSaveConsumer(flag -> LootBeams.config.allItems = flag)
                        .setTooltip(Text.of("If all Items Loot Beams should be rendered.\n Has priority over only_equipment and only_rare."))
                .build())
                .addEntry(builder.entryBuilder().startBooleanToggle(Text.of("Only Rare"), LootBeams.config.onlyRare)
                        .setDefaultValue(false)
                        .setSaveConsumer(flag -> LootBeams.config.onlyRare = flag)
                        .setTooltip(Text.of("If Loot Beams should only be rendered on items with rarity."))
                        .build())
                .addEntry(builder.entryBuilder().startBooleanToggle(Text.of("Only Equipment"), LootBeams.config.onlyEquipment)
                        .setDefaultValue(false)
                        .setSaveConsumer(flag -> LootBeams.config.onlyEquipment = flag)
                        .setTooltip(Text.of("If Loot Beams should only be rendered on equipment.\n (Equipment includes: Swords, Tools, Armor, Shields, Bows, Crossbows, Tridents, Arrows, and Fishing Rods)"))
                        .build())
                .addEntry(builder.entryBuilder().startStrList(Text.of("Whitelist"), LootBeams.config.whitelist)
                        .setDefaultValue(new ArrayList<>())
                        .setSaveConsumer(value -> LootBeams.config.whitelist = value)
                        .setTooltip(Text.of("Registry names of items that Loot Beams should render on.\n Example: \"minecraft:stone\", \"minecraft:iron_ingot\", \nYou can also specify modids for a whole mod's items."))
                        .build())
                .addEntry(builder.entryBuilder().startStrList(Text.of("Blacklist"), LootBeams.config.blacklist)
                        .setDefaultValue(new ArrayList<>())
                        .setSaveConsumer(value -> LootBeams.config.blacklist = value)
                        .setTooltip(Text.of("Registry names of items that Loot Beams should NOT render on. This has priority over everything.\n You can also specify modids for a whole mod's items."))
                        .build());
        var nametags = builder.getOrCreateCategory(Text.of("Nametags"));
        nametags.addEntry(builder.entryBuilder().startBooleanToggle(Text.of("Borders"), LootBeams.config.borders)
                        .setDefaultValue(true)
                        .setSaveConsumer(value -> LootBeams.config.borders = value)
                        .setTooltip(Text.of("Render nametags as bordered. Set to false for flat nametag with background."))
                        .build())
                .addEntry(builder.entryBuilder().startBooleanToggle(Text.of("Render Nametags"), LootBeams.config.renderNametags)
                        .setDefaultValue(true)
                        .setSaveConsumer(value -> LootBeams.config.renderNametags = value)
                        .setTooltip(Text.of("If Item nametags should be rendered."))
                        .build())
                .addEntry(builder.entryBuilder().startBooleanToggle(Text.of("Render Nametags On Look"), LootBeams.config.renderNametagsOnlook)
                        .setDefaultValue(true)
                        .setSaveConsumer(value -> LootBeams.config.renderNametagsOnlook = value)
                        .setTooltip(Text.of("If Item nametags should be rendered when looking at items."))
                        .build())
                .addEntry(builder.entryBuilder().startBooleanToggle(Text.of("Render Stack Count"), LootBeams.config.renderStackcount)
                        .setDefaultValue(true)
                        .setSaveConsumer(value -> LootBeams.config.renderStackcount = value)
                        .setTooltip(Text.of("If the count of item's should also be shown in the nametag."))
                        .build())
                .addEntry(builder.entryBuilder().startFloatField(Text.of("Nametag Look Sensitivity"), LootBeams.config.nametagLookSensitivity)
                        .setDefaultValue(0.018f)
                        .setMin(0)
                        .setMax(5)
                        .setSaveConsumer(value -> LootBeams.config.nametagLookSensitivity = value)
                        .setTooltip(Text.of("How close the player has to look at the item to render the nametag."))
                        .build())
                .addEntry(builder.entryBuilder().startFloatField(Text.of("Nametag Text Alpha"), LootBeams.config.nametagTextAlpha)
                        .setDefaultValue(1)
                        .setMin(0)
                        .setMax(1)
                        .setSaveConsumer(value -> LootBeams.config.nametagTextAlpha = value)
                        .setTooltip(Text.of("Transparency of the nametag text."))
                        .build())
                .addEntry(builder.entryBuilder().startFloatField(Text.of("Nametag Background Alpha"), LootBeams.config.nametagBackgroundAlpha)
                        .setDefaultValue(0.5f)
                        .setMin(0)
                        .setMax(1)
                        .setSaveConsumer(value -> LootBeams.config.nametagBackgroundAlpha = value)
                        .setTooltip(Text.of("Transparency of the nametag background/border."))
                        .build())
                .addEntry(builder.entryBuilder().startFloatField(Text.of("Nametag Scale"), LootBeams.config.nametagScale)
                        .setDefaultValue(1)
                        .setMin(-10)
                        .setMax(10)
                        .setSaveConsumer(value -> LootBeams.config.nametagScale = value)
                        .setTooltip(Text.of("Scale of the nametag."))
                        .build())
                .addEntry(builder.entryBuilder().startFloatField(Text.of("Nametag Y Offset"), LootBeams.config.nametagYOffset)
                        .setDefaultValue(0.75f)
                        .setMin(-30)
                        .setMax(30)
                        .setSaveConsumer(value -> LootBeams.config.nametagYOffset = value)
                        .setTooltip(Text.of("The Y-offset of the nametag."))
                        .build())
                .addEntry(builder.entryBuilder().startBooleanToggle(Text.of("DMCLoot Compat Rarity"), LootBeams.config.dmclootCompatRarity)
                        .setDefaultValue(true)
                        .setSaveConsumer(value -> LootBeams.config.dmclootCompatRarity = value)
                        .setTooltip(Text.of("If a smaller tag should be rendered under with DMCLoot rarities."))
                        .build())
                .addEntry(builder.entryBuilder().startStrList(Text.of("Custom Rarities"), LootBeams.config.customRarities)
                        .setDefaultValue(new ArrayList<>())
                        .setSaveConsumer(value -> LootBeams.config.customRarities = value)
                        .setTooltip(Text.of("Define what the smaller tag should render on. \nExample: \"Exotic\", \"Ancient\". \nThe string supplied has to be the tooltip line below the name. \nThis is really only used for modpacks."))
                        .build())
                .addEntry(builder.entryBuilder().startBooleanToggle(Text.of("White Rarities"), LootBeams.config.whiteRarities)
                        .setDefaultValue(false)
                        .setSaveConsumer(value -> LootBeams.config.whiteRarities = value)
                        .setTooltip(Text.of("If rarities should ignore color and render as white \n(This is really only used for modpacks)"))
                        .build());
        builder.setSavingRunnable(() -> LootBeams.config.save());
        return builder.build();
    }
}
